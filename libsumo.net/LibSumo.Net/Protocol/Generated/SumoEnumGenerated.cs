using System;
using System.Collections.Generic;
using System.Text;

namespace LibSumo.Net.Protocol
{
    public class SumoEnumGenerated
    {

        // Autogenerated below this line:
        // If you find error, dont correct-it here
        // See ARSdk3To.Net ConvertTools


        /// <summary>
        /// Cause of the disconnection of the product 
        /// From class : NetworkEvent 
        ///            : Network Event from product 
        /// </summary>
        public enum Disconnection_cause
        {   /// <summary>
            /// The button off has been pressed 
            /// </summary>
            off_button,
            /// <summary>
            /// Unknown generic cause 
            /// </summary>
            unknown
        };

        /// <summary>
        /// Sensor name 
        /// From class : CommonState 
        ///            : Common state from product 
        /// </summary>
        public enum SensorsStatesListChanged_sensorName
        {   /// <summary>
            /// Inertial Measurement Unit sensor 
            /// </summary>
            IMU,
            /// <summary>
            /// Barometer sensor 
            /// </summary>
            barometer,
            /// <summary>
            /// Ultrasonic sensor 
            /// </summary>
            ultrasound,
            /// <summary>
            /// GPS sensor 
            /// </summary>
            GPS,
            /// <summary>
            /// Magnetometer sensor 
            /// </summary>
            magnetometer,
            /// <summary>
            /// Vertical Camera sensor 
            /// </summary>
            vertical_camera
        };

        /// <summary>
        /// The Model of the product. 
        /// From class : CommonState 
        ///            : Common state from product 
        /// </summary>
        public enum ProductModel_model
        {   /// <summary>
            /// Travis (RS taxi) model. 
            /// </summary>
            RS_TRAVIS,
            /// <summary>
            /// Mars (RS space) model 
            /// </summary>
            RS_MARS,
            /// <summary>
            /// SWAT (RS SWAT) model 
            /// </summary>
            RS_SWAT,
            /// <summary>
            /// Mc Lane (RS police) model 
            /// </summary>
            RS_MCLANE,
            /// <summary>
            /// Blaze (RS fire) model 
            /// </summary>
            RS_BLAZE,
            /// <summary>
            /// Orak (RS carbon hydrofoil) model 
            /// </summary>
            RS_ORAK,
            /// <summary>
            /// New Z (RS wooden hydrofoil) model 
            /// </summary>
            RS_NEWZ,
            /// <summary>
            /// Marshall (JS fire) model 
            /// </summary>
            JS_MARSHALL,
            /// <summary>
            /// Diesel (JS SWAT) model 
            /// </summary>
            JS_DIESEL,
            /// <summary>
            /// Buzz (JS space) model 
            /// </summary>
            JS_BUZZ,
            /// <summary>
            /// Max (JS F1) model 
            /// </summary>
            JS_MAX,
            /// <summary>
            /// Jett (JS flames) model 
            /// </summary>
            JS_JETT,
            /// <summary>
            /// Tuk-Tuk (JS taxi) model 
            /// </summary>
            JS_TUKTUK,
            /// <summary>
            /// Swing black model 
            /// </summary>
            SW_BLACK,
            /// <summary>
            /// Swing white model 
            /// </summary>
            SW_WHITE
        };

        /// <summary>
        /// type of the played mavlink file 
        /// From class : Mavlink 
        ///            : Mavlink flight plans commands 
        /// </summary>
        public enum Start_type
        {   /// <summary>
            /// Mavlink file for FlightPlan 
            /// </summary>
            flightPlan,
            /// <summary>
            /// Mavlink file for MapMyHouse 
            /// </summary>
            mapMyHouse
        };

        /// <summary>
        /// State of the mavlink 
        /// From class : MavlinkState 
        ///            : Mavlink flight plans states commands 
        /// </summary>
        public enum MavlinkFilePlayingStateChanged_state
        {   /// <summary>
            /// Mavlink file is playing 
            /// </summary>
            playing,
            /// <summary>
            /// Mavlink file is stopped (arg filepath and type are useless in this state) 
            /// </summary>
            stopped,
            /// <summary>
            /// Mavlink file is paused 
            /// </summary>
            paused,
            /// <summary>
            /// Mavlink file is loaded (it will be played at take-off) 
            /// </summary>
            loaded
        };

        /// <summary>
        /// type of the played mavlink file 
        /// From class : MavlinkState 
        ///            : Mavlink flight plans states commands 
        /// </summary>
        public enum MavlinkFilePlayingStateChanged_type
        {   /// <summary>
            /// Mavlink file for FlightPlan 
            /// </summary>
            flightPlan,
            /// <summary>
            /// Mavlink file for MapMyHouse 
            /// </summary>
            mapMyHouse
        };

        /// <summary>
        /// State of play error 
        /// From class : MavlinkState 
        ///            : Mavlink flight plans states commands 
        /// </summary>
        public enum MavlinkPlayErrorStateChanged_error
        {   /// <summary>
            /// There is no error 
            /// </summary>
            none,
            /// <summary>
            /// The drone is not in outdoor mode 
            /// </summary>
            notInOutDoorMode,
            /// <summary>
            /// The gps is not fixed 
            /// </summary>
            gpsNotFixed,
            /// <summary>
            /// The magnetometer of the drone is not calibrated 
            /// </summary>
            notCalibrated
        };

        /// <summary>
        /// The axis to calibrate 
        /// From class : CalibrationState 
        ///            : Status of the calibration 
        /// </summary>
        public enum MagnetoCalibrationAxisToCalibrateChanged_axis
        {   /// <summary>
            /// If the current calibration axis should be the x axis 
            /// </summary>
            xAxis,
            /// <summary>
            /// If the current calibration axis should be the y axis 
            /// </summary>
            yAxis,
            /// <summary>
            /// If the current calibration axis should be the z axis 
            /// </summary>
            zAxis,
            /// <summary>
            /// If none of the axis should be calibrated 
            /// </summary>
            none
        };

        /// <summary>
        /// State of pitot calibration 
        /// From class : CalibrationState 
        ///            : Status of the calibration 
        /// </summary>
        public enum PitotCalibrationStateChanged_state
        {   /// <summary>
            /// Calibration is ok 
            /// </summary>
            done,
            /// <summary>
            /// Calibration is started, waiting user action 
            /// </summary>
            ready,
            /// <summary>
            /// Calibration is in progress 
            /// </summary>
            in_progress,
            /// <summary>
            /// Calibration is required 
            /// </summary>
            required
        };

        /// <summary>
        /// Drone FlightPlan component id (unique) 
        /// From class : FlightPlanState 
        ///            : FlightPlan state commands 
        /// </summary>
        public enum ComponentStateListChanged_component
        {   /// <summary>
            /// Drone GPS component. State is 0 when the drone needs a GPS fix. 
            /// </summary>
            GPS,
            /// <summary>
            /// Drone Calibration component. State is 0 when the sensors of the drone needs to be calibrated. 
            /// </summary>
            Calibration,
            /// <summary>
            /// Mavlink file component. State is 0 when the mavlink file is missing or contains error. 
            /// </summary>
            Mavlink_File,
            /// <summary>
            /// Drone Take off component. State is 0 when the drone cannot take-off. 
            /// </summary>
            TakeOff,
            /// <summary>
            /// Component for waypoints beyond the geofence. State is 0 when one or more waypoints are beyond the geofence. 
            /// </summary>
            WaypointsBeyondGeofence
        };

        /// <summary>
        /// Animation to start. 
        /// From class : Animations 
        ///            : Animations-related commands. 
        /// </summary>
        public enum StartAnimation_anim
        {   /// <summary>
            /// Flash headlights. 
            /// </summary>
            HEADLIGHTS_FLASH,
            /// <summary>
            /// Blink headlights. 
            /// </summary>
            HEADLIGHTS_BLINK,
            /// <summary>
            /// Oscillating headlights. 
            /// </summary>
            HEADLIGHTS_OSCILLATION,
            /// <summary>
            /// Spin animation. 
            /// </summary>
            SPIN,
            /// <summary>
            /// Tap animation. 
            /// </summary>
            TAP,
            /// <summary>
            /// Slow shake animation. 
            /// </summary>
            SLOW_SHAKE,
            /// <summary>
            /// Metronome animation. 
            /// </summary>
            METRONOME,
            /// <summary>
            /// Standing dance animation. 
            /// </summary>
            ONDULATION,
            /// <summary>
            /// Spin jump animation. 
            /// </summary>
            SPIN_JUMP,
            /// <summary>
            /// Spin that end in standing posture, or in jumper if it was standing animation. 
            /// </summary>
            SPIN_TO_POSTURE,
            /// <summary>
            /// Spiral animation. 
            /// </summary>
            SPIRAL,
            /// <summary>
            /// Slalom animation. 
            /// </summary>
            SLALOM,
            /// <summary>
            /// Boost animation. 
            /// </summary>
            BOOST,
            /// <summary>
            /// Make a looping. (Only for WingX) 
            /// </summary>
            LOOPING,
            /// <summary>
            /// Make a barrel roll of 180 degree turning on right. (Only for WingX) 
            /// </summary>
            BARREL_ROLL_180_RIGHT,
            /// <summary>
            /// Make a barrel roll of 180 degree turning on left. (Only for WingX) 
            /// </summary>
            BARREL_ROLL_180_LEFT,
            /// <summary>
            /// Put the drone upside down. (Only for WingX) 
            /// </summary>
            BACKSWAP
        };

        /// <summary>
        /// Animation to stop. 
        /// From class : Animations 
        ///            : Animations-related commands. 
        /// </summary>
        public enum StopAnimation_anim
        {   /// <summary>
            /// Flash headlights. 
            /// </summary>
            HEADLIGHTS_FLASH,
            /// <summary>
            /// Blink headlights. 
            /// </summary>
            HEADLIGHTS_BLINK,
            /// <summary>
            /// Oscillating headlights. 
            /// </summary>
            HEADLIGHTS_OSCILLATION,
            /// <summary>
            /// Spin animation. 
            /// </summary>
            SPIN,
            /// <summary>
            /// Tap animation. 
            /// </summary>
            TAP,
            /// <summary>
            /// Slow shake animation. 
            /// </summary>
            SLOW_SHAKE,
            /// <summary>
            /// Metronome animation. 
            /// </summary>
            METRONOME,
            /// <summary>
            /// Standing dance animation. 
            /// </summary>
            ONDULATION,
            /// <summary>
            /// Spin jump animation. 
            /// </summary>
            SPIN_JUMP,
            /// <summary>
            /// Spin that end in standing posture, or in jumper if it was standing animation. 
            /// </summary>
            SPIN_TO_POSTURE,
            /// <summary>
            /// Spiral animation. 
            /// </summary>
            SPIRAL,
            /// <summary>
            /// Slalom animation. 
            /// </summary>
            SLALOM,
            /// <summary>
            /// Boost animation. 
            /// </summary>
            BOOST,
            /// <summary>
            /// Make a looping. (Only for WingX) 
            /// </summary>
            LOOPING,
            /// <summary>
            /// Make a barrel roll of 180 degree turning on right. (Only for WingX) 
            /// </summary>
            BARREL_ROLL_180_RIGHT,
            /// <summary>
            /// Make a barrel roll of 180 degree turning on left. (Only for WingX) 
            /// </summary>
            BARREL_ROLL_180_LEFT,
            /// <summary>
            /// Put the drone upside down. (Only for WingX) 
            /// </summary>
            BACKSWAP
        };

        /// <summary>
        /// Animation type. 
        /// From class : AnimationsState 
        ///            : Animations-related notification/feedback commands. 
        /// </summary>
        public enum List_anim
        {   /// <summary>
            /// Flash headlights. 
            /// </summary>
            HEADLIGHTS_FLASH,
            /// <summary>
            /// Blink headlights. 
            /// </summary>
            HEADLIGHTS_BLINK,
            /// <summary>
            /// Oscillating headlights. 
            /// </summary>
            HEADLIGHTS_OSCILLATION,
            /// <summary>
            /// Spin animation. 
            /// </summary>
            SPIN,
            /// <summary>
            /// Tap animation. 
            /// </summary>
            TAP,
            /// <summary>
            /// Slow shake animation. 
            /// </summary>
            SLOW_SHAKE,
            /// <summary>
            /// Metronome animation. 
            /// </summary>
            METRONOME,
            /// <summary>
            /// Standing dance animation. 
            /// </summary>
            ONDULATION,
            /// <summary>
            /// Spin jump animation. 
            /// </summary>
            SPIN_JUMP,
            /// <summary>
            /// Spin that end in standing posture, or in jumper if it was standing animation. 
            /// </summary>
            SPIN_TO_POSTURE,
            /// <summary>
            /// Spiral animation. 
            /// </summary>
            SPIRAL,
            /// <summary>
            /// Slalom animation. 
            /// </summary>
            SLALOM,
            /// <summary>
            /// Boost animation. 
            /// </summary>
            BOOST,
            /// <summary>
            /// Make a looping. (Only for WingX) 
            /// </summary>
            LOOPING,
            /// <summary>
            /// Make a barrel roll of 180 degree turning on right. (Only for WingX) 
            /// </summary>
            BARREL_ROLL_180_RIGHT,
            /// <summary>
            /// Make a barrel roll of 180 degree turning on left. (Only for WingX) 
            /// </summary>
            BARREL_ROLL_180_LEFT,
            /// <summary>
            /// Put the drone upside down. (Only for WingX) 
            /// </summary>
            BACKSWAP
        };

        /// <summary>
        /// State of the animation 
        /// From class : AnimationsState 
        ///            : Animations-related notification/feedback commands. 
        /// </summary>
        public enum List_state
        {   /// <summary>
            /// animation is stopped 
            /// </summary>
            stopped,
            /// <summary>
            /// animation is started 
            /// </summary>
            started,
            /// <summary>
            /// The animation is not available 
            /// </summary>
            notAvailable
        };

        /// <summary>
        /// Error to explain the state 
        /// From class : AnimationsState 
        ///            : Animations-related notification/feedback commands. 
        /// </summary>
        public enum List_error
        {   /// <summary>
            /// No Error 
            /// </summary>
            ok,
            /// <summary>
            /// Unknown generic error 
            /// </summary>
            unknown
        };

        /// <summary>
        /// Accessory configuration to set. 
        /// From class : Accessory 
        ///            : Accessories-related commands. 
        /// </summary>
        public enum Config_accessory
        {   /// <summary>
            /// No accessory. 
            /// </summary>
            NO_ACCESSORY,
            /// <summary>
            /// Standard wheels 
            /// </summary>
            STD_WHEELS,
            /// <summary>
            /// Truck wheels 
            /// </summary>
            TRUCK_WHEELS,
            /// <summary>
            /// Hull 
            /// </summary>
            HULL,
            /// <summary>
            /// Hydrofoil 
            /// </summary>
            HYDROFOIL
        };

        /// <summary>
        /// Accessory configurations supported by the product. 
        /// From class : AccessoryState 
        ///            : Accessories-related commands. 
        /// </summary>
        public enum SupportedAccessoriesListChanged_accessory
        {   /// <summary>
            /// No accessory. 
            /// </summary>
            NO_ACCESSORY,
            /// <summary>
            /// Standard wheels 
            /// </summary>
            STD_WHEELS,
            /// <summary>
            /// Truck wheels 
            /// </summary>
            TRUCK_WHEELS,
            /// <summary>
            /// Hull 
            /// </summary>
            HULL,
            /// <summary>
            /// Hydrofoil 
            /// </summary>
            HYDROFOIL
        };

        /// <summary>
        /// Accessory configuration reported by firmware. 
        /// From class : AccessoryState 
        ///            : Accessories-related commands. 
        /// </summary>
        public enum AccessoryConfigChanged_newAccessory
        {   /// <summary>
            /// No accessory configuration set. Controller needs to set one. 
            /// </summary>
            UNCONFIGURED,
            /// <summary>
            /// No accessory. 
            /// </summary>
            NO_ACCESSORY,
            /// <summary>
            /// Standard wheels 
            /// </summary>
            STD_WHEELS,
            /// <summary>
            /// Truck wheels 
            /// </summary>
            TRUCK_WHEELS,
            /// <summary>
            /// Hull 
            /// </summary>
            HULL,
            /// <summary>
            /// Hydrofoil 
            /// </summary>
            HYDROFOIL,
            /// <summary>
            /// Configuration in progress. 
            /// </summary>
            IN_PROGRESS
        };

        /// <summary>
        /// Error code. 
        /// From class : AccessoryState 
        ///            : Accessories-related commands. 
        /// </summary>
        public enum AccessoryConfigChanged_error
        {   /// <summary>
            /// No error. Accessory config change successful. 
            /// </summary>
            OK,
            /// <summary>
            /// Cannot change accessory configuration for some reason. 
            /// </summary>
            UNKNOWN,
            /// <summary>
            /// Cannot change accessory configuration while flying. 
            /// </summary>
            FLYING
        };

        /// <summary>
        /// The new maximum charge rate. 
        /// From class : Charger 
        ///            : Commands sent by the controller to set charger parameters. 
        /// </summary>
        public enum SetMaxChargeRate_rate
        {   /// <summary>
            /// Fully charge the battery at a slow rate. Typically limit max charge current to 512 mA. 
            /// </summary>
            SLOW,
            /// <summary>
            /// Almost fully-charge the battery at moderate rate (> 512mA) but slower than the fastest rate. 
            /// </summary>
            MODERATE,
            /// <summary>
            /// Almost fully-charge the battery at the highest possible rate supported by the charger. 
            /// </summary>
            FAST
        };

        /// <summary>
        /// The current maximum charge rate. 
        /// From class : ChargerState 
        ///            : Commands sent by the firmware to advertise the charger status. 
        /// </summary>
        public enum MaxChargeRateChanged_rate
        {   /// <summary>
            /// Fully charge the battery at a slow rate. Typically limit max charge current to 512 mA. 
            /// </summary>
            SLOW,
            /// <summary>
            /// Almost fully-charge the battery at moderate rate (> 512 mA) but slower than the fastest rate. 
            /// </summary>
            MODERATE,
            /// <summary>
            /// Almost fully-charge the battery at the highest possible rate supported by the charger. 
            /// </summary>
            FAST
        };

        /// <summary>
        /// Charger status. 
        /// From class : ChargerState 
        ///            : Commands sent by the firmware to advertise the charger status. 
        /// </summary>
        public enum CurrentChargeStateChanged_status
        {   /// <summary>
            /// The battery is discharging. 
            /// </summary>
            DISCHARGING,
            /// <summary>
            /// The battery is charging at a slow rate about 512 mA. 
            /// </summary>
            CHARGING_SLOW,
            /// <summary>
            /// The battery is charging at a moderate rate (> 512 mA) but slower than the fastest rate. 
            /// </summary>
            CHARGING_MODERATE,
            /// <summary>
            /// The battery is charging at a the fastest rate. 
            /// </summary>
            CHARGING_FAST,
            /// <summary>
            /// The charger is plugged and the battery is fully charged. 
            /// </summary>
            BATTERY_FULL
        };

        /// <summary>
        /// The current charging phase. 
        /// From class : ChargerState 
        ///            : Commands sent by the firmware to advertise the charger status. 
        /// </summary>
        public enum CurrentChargeStateChanged_phase
        {   /// <summary>
            /// The charge phase is unknown or irrelevant. 
            /// </summary>
            UNKNOWN,
            /// <summary>
            /// First phase of the charging process. The battery is charging with constant current. 
            /// </summary>
            CONSTANT_CURRENT_1,
            /// <summary>
            /// Second phase of the charging process. The battery is charging with constant current, with a higher voltage than the first phase. 
            /// </summary>
            CONSTANT_CURRENT_2,
            /// <summary>
            /// Last part of the charging process. The battery is charging with a constant voltage. 
            /// </summary>
            CONSTANT_VOLTAGE,
            /// <summary>
            /// The battery is fully charged. 
            /// </summary>
            CHARGED
        };

        /// <summary>
        /// The charge rate recorded by the firmware for the last charge. 
        /// From class : ChargerState 
        ///            : Commands sent by the firmware to advertise the charger status. 
        /// </summary>
        public enum LastChargeRateChanged_rate
        {   /// <summary>
            /// The last charge rate is not known. 
            /// </summary>
            UNKNOWN,
            /// <summary>
            /// Slow charge rate. 
            /// </summary>
            SLOW,
            /// <summary>
            /// Moderate charge rate. 
            /// </summary>
            MODERATE,
            /// <summary>
            /// Fast charge rate. 
            /// </summary>
            FAST
        };

        /// <summary>
        /// The current charging phase. 
        /// From class : ChargerState 
        ///            : Commands sent by the firmware to advertise the charger status. 
        /// </summary>
        public enum ChargingInfo_phase
        {   /// <summary>
            /// The charge phase is unknown or irrelevant. 
            /// </summary>
            UNKNOWN,
            /// <summary>
            /// First phase of the charging process. The battery is charging with constant current. 
            /// </summary>
            CONSTANT_CURRENT_1,
            /// <summary>
            /// Second phase of the charging process. The battery is charging with constant current, with a higher voltage than the first phase. 
            /// </summary>
            CONSTANT_CURRENT_2,
            /// <summary>
            /// Last part of the charging process. The battery is charging with a constant voltage. 
            /// </summary>
            CONSTANT_VOLTAGE,
            /// <summary>
            /// The battery is fully charged. 
            /// </summary>
            CHARGED,
            /// <summary>
            /// The battery is discharging; Other arguments refers to the last charge. 
            /// </summary>
            DISCHARGING
        };

        /// <summary>
        /// The charge rate. If phase is DISCHARGING, refers to the last charge. 
        /// From class : ChargerState 
        ///            : Commands sent by the firmware to advertise the charger status. 
        /// </summary>
        public enum ChargingInfo_rate
        {   /// <summary>
            /// The charge rate is not known. 
            /// </summary>
            UNKNOWN,
            /// <summary>
            /// Slow charge rate. 
            /// </summary>
            SLOW,
            /// <summary>
            /// Moderate charge rate. 
            /// </summary>
            MODERATE,
            /// <summary>
            /// Fast charge rate. 
            /// </summary>
            FAST
        };

        /// <summary>
        /// Type of Posture 
        /// From class : Piloting 
        ///            : All commands related to piloting the JumpingSumo 
        /// </summary>
        public enum Posture_type
        {   /// <summary>
            /// Standing type 
            /// </summary>
            standing,
            /// <summary>
            /// Jumper type 
            /// </summary>
            jumper,
            /// <summary>
            /// Kicker type 
            /// </summary>
            kicker
        };

        /// <summary>
        /// State of posture 
        /// From class : PilotingState 
        ///            : Animations state from JS. 
        /// </summary>
        public enum PostureChanged_state
        {   /// <summary>
            /// Standing state 
            /// </summary>
            standing,
            /// <summary>
            /// Jumper state 
            /// </summary>
            jumper,
            /// <summary>
            /// Kicker state 
            /// </summary>
            kicker,
            /// <summary>
            /// Stuck state 
            /// </summary>
            stuck,
            /// <summary>
            /// Unknown state 
            /// </summary>
            unknown
        };

        /// <summary>
        /// JS alert state 
        /// From class : PilotingState 
        ///            : Animations state from JS. 
        /// </summary>
        public enum AlertStateChanged_state
        {   /// <summary>
            /// No alert 
            /// </summary>
            none,
            /// <summary>
            /// Critical battery alert 
            /// </summary>
            critical_battery,
            /// <summary>
            /// Low battery alert 
            /// </summary>
            low_battery
        };

        /// <summary>
        /// Type of jump 
        /// From class : Animations 
        ///            : Animation commands 
        /// </summary>
        public enum Jump_type
        {   /// <summary>
            /// Long jump. 
            /// </summary>
            _long,
            /// <summary>
            /// High jump 
            /// </summary>
            high
        };

        /// <summary>
        /// Animation ID. 
        /// From class : Animations 
        ///            : Animation commands 
        /// </summary>
        public enum SimpleAnimation_id
        {   /// <summary>
            /// Stop ongoing animation. 
            /// </summary>
            stop,
            /// <summary>
            /// Start a spin animation. 
            /// </summary>
            spin,
            /// <summary>
            /// Start a tap animation. 
            /// </summary>
            tap,
            /// <summary>
            /// Start a slow shake animation. 
            /// </summary>
            slowshake,
            /// <summary>
            /// Start a Metronome animation. 
            /// </summary>
            metronome,
            /// <summary>
            /// Start a standing dance animation. 
            /// </summary>
            ondulation,
            /// <summary>
            /// Start a spin jump animation. 
            /// </summary>
            spinjump,
            /// <summary>
            /// Start a spin that end in standing posture, or in jumper if it was standing animation. 
            /// </summary>
            spintoposture,
            /// <summary>
            /// Start a spiral animation. 
            /// </summary>
            spiral,
            /// <summary>
            /// Start a slalom animation. 
            /// </summary>
            slalom
        };

        /// <summary>
        /// State of jump load 
        /// From class : AnimationsState 
        ///            : Animations state from JS. 
        /// </summary>
        public enum JumpLoadChanged_state
        {   /// <summary>
            /// Unknown state (obsolete). 
            /// </summary>
            unknown,
            /// <summary>
            /// Unloaded state. 
            /// </summary>
            unloaded,
            /// <summary>
            /// Loaded state. 
            /// </summary>
            loaded,
            /// <summary>
            /// Unknown state (obsolete). 
            /// </summary>
            busy,
            /// <summary>
            /// Unloaded state and low battery. 
            /// </summary>
            low_battery_unloaded,
            /// <summary>
            /// Loaded state and low battery. 
            /// </summary>
            low_battery_loaded
        };

        /// <summary>
        /// State of jump type. 
        /// From class : AnimationsState 
        ///            : Animations state from JS. 
        /// </summary>
        public enum JumpTypeChanged_state
        {   /// <summary>
            /// None. 
            /// </summary>
            none,
            /// <summary>
            /// Long jump type. 
            /// </summary>
            _long,
            /// <summary>
            /// High jump type. 
            /// </summary>
            high
        };

        /// <summary>
        /// Enum describing the problem of the motor 
        /// From class : AnimationsState 
        ///            : Animations state from JS. 
        /// </summary>
        public enum JumpMotorProblemChanged_error
        {   /// <summary>
            /// None. 
            /// </summary>
            none,
            /// <summary>
            /// Motor blocked 
            /// </summary>
            blocked,
            /// <summary>
            /// Motor over heated 
            /// </summary>
            over_heated
        };

        /// <summary>
        /// Command to record video 
        /// From class : MediaRecord 
        ///            : Media recording management 
        /// </summary>
        public enum Video_record
        {   /// <summary>
            /// Stop the video recording 
            /// </summary>
            stop,
            /// <summary>
            /// Start the video recording 
            /// </summary>
            start
        };

        /// <summary>
        /// Command to record video 
        /// From class : MediaRecord 
        ///            : Media recording management 
        /// </summary>
        public enum VideoV2_record
        {   /// <summary>
            /// Stop the video recording 
            /// </summary>
            stop,
            /// <summary>
            /// Start the video recording 
            /// </summary>
            start
        };

        /// <summary>
        /// State of video 
        /// From class : MediaRecordState 
        ///            : State of media recording 
        /// </summary>
        public enum VideoStateChanged_state
        {   /// <summary>
            /// Video was stopped 
            /// </summary>
            stopped,
            /// <summary>
            /// Video was started 
            /// </summary>
            started,
            /// <summary>
            /// Video was failed 
            /// </summary>
            failed
        };

        /// <summary>
        /// State of device picture recording 
        /// From class : MediaRecordState 
        ///            : State of media recording 
        /// </summary>
        public enum PictureStateChangedV2_state
        {   /// <summary>
            /// The picture recording is ready 
            /// </summary>
            ready,
            /// <summary>
            /// The picture recording is busy 
            /// </summary>
            busy,
            /// <summary>
            /// The picture recording is not available 
            /// </summary>
            notAvailable
        };

        /// <summary>
        /// Error to explain the state 
        /// From class : MediaRecordState 
        ///            : State of media recording 
        /// </summary>
        public enum PictureStateChangedV2_error
        {   /// <summary>
            /// No Error 
            /// </summary>
            ok,
            /// <summary>
            /// Unknown generic error 
            /// </summary>
            unknown,
            /// <summary>
            /// Picture camera is out of order 
            /// </summary>
            camera_ko,
            /// <summary>
            /// Memory full ; cannot save one additional picture 
            /// </summary>
            memoryFull,
            /// <summary>
            /// Battery is too low to start/keep recording. 
            /// </summary>
            lowBattery
        };

        /// <summary>
        /// State of device video recording 
        /// From class : MediaRecordState 
        ///            : State of media recording 
        /// </summary>
        public enum VideoStateChangedV2_state
        {   /// <summary>
            /// Video is stopped 
            /// </summary>
            stopped,
            /// <summary>
            /// Video is started 
            /// </summary>
            started,
            /// <summary>
            /// The video recording is not available 
            /// </summary>
            notAvailable
        };

        /// <summary>
        /// Error to explain the state 
        /// From class : MediaRecordState 
        ///            : State of media recording 
        /// </summary>
        public enum VideoStateChangedV2_error
        {   /// <summary>
            /// No Error 
            /// </summary>
            ok,
            /// <summary>
            /// Unknown generic error 
            /// </summary>
            unknown,
            /// <summary>
            /// Video camera is out of order 
            /// </summary>
            camera_ko,
            /// <summary>
            /// Memory full ; cannot save one additional video 
            /// </summary>
            memoryFull,
            /// <summary>
            /// Battery is too low to start/keep recording. 
            /// </summary>
            lowBattery
        };

        /// <summary>
        /// Last event of picture recording 
        /// From class : MediaRecordEvent 
        ///            : Events of media recording 
        /// </summary>
        public enum PictureEventChanged_event
        {   /// <summary>
            /// Picture taken and saved 
            /// </summary>
            taken,
            /// <summary>
            /// Picture failed 
            /// </summary>
            failed
        };

        /// <summary>
        /// Error to explain the event 
        /// From class : MediaRecordEvent 
        ///            : Events of media recording 
        /// </summary>
        public enum PictureEventChanged_error
        {   /// <summary>
            /// No Error 
            /// </summary>
            ok,
            /// <summary>
            /// Unknown generic error ; only when state is failed 
            /// </summary>
            unknown,
            /// <summary>
            /// Picture recording is busy ; only when state is failed 
            /// </summary>
            busy,
            /// <summary>
            /// Picture recording not available ; only when state is failed 
            /// </summary>
            notAvailable,
            /// <summary>
            /// Memory full ; only when state is failed 
            /// </summary>
            memoryFull,
            /// <summary>
            /// Battery is too low to record. 
            /// </summary>
            lowBattery
        };

        /// <summary>
        /// Event of video recording 
        /// From class : MediaRecordEvent 
        ///            : Events of media recording 
        /// </summary>
        public enum VideoEventChanged_event
        {   /// <summary>
            /// Video start 
            /// </summary>
            start,
            /// <summary>
            /// Video stop and saved 
            /// </summary>
            stop,
            /// <summary>
            /// Video failed 
            /// </summary>
            failed
        };

        /// <summary>
        /// Error to explain the event 
        /// From class : MediaRecordEvent 
        ///            : Events of media recording 
        /// </summary>
        public enum VideoEventChanged_error
        {   /// <summary>
            /// No Error 
            /// </summary>
            ok,
            /// <summary>
            /// Unknown generic error ; only when state is failed 
            /// </summary>
            unknown,
            /// <summary>
            /// Video recording is busy ; only when state is failed 
            /// </summary>
            busy,
            /// <summary>
            /// Video recording not available ; only when state is failed 
            /// </summary>
            notAvailable,
            /// <summary>
            /// Memory full 
            /// </summary>
            memoryFull,
            /// <summary>
            /// Battery is too low to record. 
            /// </summary>
            lowBattery,
            /// <summary>
            /// Video was auto stopped 
            /// </summary>
            autoStopped
        };

        /// <summary>
        /// The type of wifi selection (auto, manual) 
        /// From class : NetworkSettings 
        ///            : Network settings commands 
        /// </summary>
        public enum WifiSelection_type
        {   /// <summary>
            /// Auto selection 
            /// </summary>
            auto,
            /// <summary>
            /// Manual selection 
            /// </summary>
            manual
        };

        /// <summary>
        /// The allowed band(s) : 2.4 Ghz, 5 Ghz, or all 
        /// From class : NetworkSettings 
        ///            : Network settings commands 
        /// </summary>
        public enum WifiSelection_band
        {   /// <summary>
            /// 2.4 GHz band 
            /// </summary>
            _2_4ghz,
            /// <summary>
            /// 5 GHz band 
            /// </summary>
            _5ghz,
            /// <summary>
            /// Both 2.4 and 5 GHz bands 
            /// </summary>
            all
        };

        /// <summary>
        /// The type of wifi selection settings 
        /// From class : NetworkSettingsState 
        ///            : Network settings state from product 
        /// </summary>
        public enum WifiSelectionChanged_type
        {   /// <summary>
            /// Auto selection 
            /// </summary>
            auto_all,
            /// <summary>
            /// Auto selection 2.4ghz 
            /// </summary>
            auto_2_4ghz,
            /// <summary>
            /// Auto selection 5 ghz 
            /// </summary>
            auto_5ghz,
            /// <summary>
            /// Manual selection 
            /// </summary>
            manual
        };

        /// <summary>
        /// The actual wifi band state 
        /// From class : NetworkSettingsState 
        ///            : Network settings state from product 
        /// </summary>
        public enum WifiSelectionChanged_band
        {   /// <summary>
            /// 2.4 GHz band 
            /// </summary>
            _2_4ghz,
            /// <summary>
            /// 5 GHz band 
            /// </summary>
            _5ghz,
            /// <summary>
            /// Both 2.4 and 5 GHz bands 
            /// </summary>
            all
        };

        /// <summary>
        /// The band(s) : 2.4 Ghz, 5 Ghz, or both 
        /// From class : Network 
        ///            : Network related commands 
        /// </summary>
        public enum WifiScan_band
        {   /// <summary>
            /// 2.4 GHz band 
            /// </summary>
            _2_4ghz,
            /// <summary>
            /// 5 GHz band 
            /// </summary>
            _5ghz,
            /// <summary>
            /// Both 2.4 and 5 GHz bands 
            /// </summary>
            all
        };

        /// <summary>
        /// The band : 2.4 GHz or 5 GHz 
        /// From class : NetworkState 
        ///            : Network state from Product 
        /// </summary>
        public enum WifiScanListChanged_band
        {   /// <summary>
            /// 2.4 GHz band 
            /// </summary>
            _2_4ghz,
            /// <summary>
            /// 5 GHz band 
            /// </summary>
            _5ghz
        };

        /// <summary>
        /// The band of this channel : 2.4 GHz or 5 GHz 
        /// From class : NetworkState 
        ///            : Network state from Product 
        /// </summary>
        public enum WifiAuthChannelListChanged_band
        {   /// <summary>
            /// 2.4 GHz band 
            /// </summary>
            _2_4ghz,
            /// <summary>
            /// 5 GHz band 
            /// </summary>
            _5ghz
        };

        /// <summary>
        /// The audio theme to set. 
        /// From class : AudioSettings 
        ///            : Audio settings. 
        /// </summary>
        public enum Theme_theme
        {   /// <summary>
            /// Default audio theme (depends on the product color) 
            /// </summary>
            _default,
            /// <summary>
            /// Robot audio theme. 
            /// </summary>
            robot,
            /// <summary>
            /// Insect audio theme. 
            /// </summary>
            insect,
            /// <summary>
            /// Monster audio theme. 
            /// </summary>
            monster
        };

        /// <summary>
        /// The audio theme to set. 
        /// From class : AudioSettingsState 
        ///            : Audio settings state. 
        /// </summary>
        public enum ThemeChanged_theme
        {   /// <summary>
            /// Default audio theme (depends on the product color) 
            /// </summary>
            _default,
            /// <summary>
            /// Robot audio theme. 
            /// </summary>
            robot,
            /// <summary>
            /// Insect audio theme. 
            /// </summary>
            insect,
            /// <summary>
            /// Monster audio theme. 
            /// </summary>
            monster
        };

        /// <summary>
        /// Error code. 
        /// From class : RoadPlanState 
        ///            : RoadPlan command responses. 
        /// </summary>
        public enum ScriptUploadChanged_resultCode
        {   /// <summary>
            /// The script was parsed successfully. 
            /// </summary>
            error_ok,
            /// <summary>
            /// The MD5 hash codes are different or file is unreadable. 
            /// </summary>
            error_file_corrupted,
            /// <summary>
            /// The parser is not well formed or can not be parsed. 
            /// </summary>
            error_invalid_format,
            /// <summary>
            /// The file is larger than maximum allowed size. 
            /// </summary>
            error_file_too_large,
            /// <summary>
            /// Script version is not supported by device. 
            /// </summary>
            error_unsupported
        };

        /// <summary>
        /// Error code. 
        /// From class : RoadPlanState 
        ///            : RoadPlan command responses. 
        /// </summary>
        public enum ScriptDeleteChanged_resultCode
        {   /// <summary>
            /// The script was deleted successfully. 
            /// </summary>
            error_ok,
            /// <summary>
            /// No script with this uuid exists. 
            /// </summary>
            error_no_such_script,
            /// <summary>
            /// An internal error occured while attempting to delete the script. 
            /// </summary>
            error_internal_failure
        };

        /// <summary>
        /// Error code. 
        /// From class : RoadPlanState 
        ///            : RoadPlan command responses. 
        /// </summary>
        public enum PlayScriptChanged_resultCode
        {   /// <summary>
            /// The script started playing successfully. 
            /// </summary>
            script_started,
            /// <summary>
            /// The script finished successfully. 
            /// </summary>
            script_finished,
            /// <summary>
            /// No script with this uuid exists. 
            /// </summary>
            script_no_such_script,
            /// <summary>
            /// An error occured while playing the script. 
            /// </summary>
            script_error
        };

        /// <summary>
        /// Current video streaming status. 
        /// From class : MediaStreamingState 
        ///            : Media streaming status. 
        /// </summary>
        public enum VideoEnableChanged_enabled
        {   /// <summary>
            /// Video streaming is enabled. 
            /// </summary>
            enabled,
            /// <summary>
            /// Video streaming is disabled. 
            /// </summary>
            disabled,
            /// <summary>
            /// Video streaming failed to start. 
            /// </summary>
            error,
        };




    }
}
