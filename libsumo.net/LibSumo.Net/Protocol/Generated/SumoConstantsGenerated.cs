using System;
using System.Collections.Generic;
using System.Text;

namespace LibSumo.Net.Protocol
{
    internal class SumoConstantsGenerated
    {

        // Autogenerated below this line:
        // If you find error, dont correct-it here
        // See ARSdk3To.Net ConvertTools

        public const int common_project = 0;
        public const int common_project_NetworkEvent_class = 1;
        public const int common_project_NetworkEvent_class_Disconnection_cmd = 0;
        public const int common_project_SettingsState_class = 3;
        public const int common_project_SettingsState_class_AllSettingsChanged_cmd = 0;
        public const int common_project_SettingsState_class_ResetChanged_cmd = 1;
        public const int common_project_SettingsState_class_ProductNameChanged_cmd = 2;
        public const int common_project_SettingsState_class_ProductVersionChanged_cmd = 3;
        public const int common_project_SettingsState_class_ProductSerialHighChanged_cmd = 4;
        public const int common_project_SettingsState_class_ProductSerialLowChanged_cmd = 5;
        public const int common_project_SettingsState_class_CountryChanged_cmd = 6;
        public const int common_project_SettingsState_class_AutoCountryChanged_cmd = 7;
        public const int common_project_CommonState_class = 5;
        public const int common_project_CommonState_class_AllStatesChanged_cmd = 0;
        public const int common_project_CommonState_class_BatteryStateChanged_cmd = 1;
        public const int common_project_CommonState_class_MassStorageStateListChanged_cmd = 2;
        public const int common_project_CommonState_class_MassStorageInfoStateListChanged_cmd = 3;
        public const int common_project_CommonState_class_CurrentDateChanged_cmd = 4;
        public const int common_project_CommonState_class_CurrentTimeChanged_cmd = 5;
        public const int common_project_CommonState_class_WifiSignalChanged_cmd = 7;
        public const int common_project_CommonState_class_SensorsStatesListChanged_cmd = 8;
        public const int common_project_CommonState_class_ProductModel_cmd = 9;
        public const int common_project_CommonState_class_MassStorageContent_cmd = 12;
        public const int common_project_CommonState_class_MassStorageContentForCurrentRun_cmd = 13;
        public const int common_project_CommonState_class_VideoRecordingTimestamp_cmd = 14;
        public const int common_project_OverHeatState_class = 7;
        public const int common_project_OverHeatState_class_OverHeatRegulationChanged_cmd = 1;
        public const int common_project_WifiSettingsState_class = 10;
        public const int common_project_WifiSettingsState_class_outdoorSettingsChanged_cmd = 0;
        public const int common_project_MavlinkState_class = 12;
        public const int common_project_MavlinkState_class_MavlinkFilePlayingStateChanged_cmd = 0;
        public const int common_project_MavlinkState_class_MissionItemExecuted_cmd = 2;
        public const int common_project_FlightPlanSettingsState_class = 33;
        public const int common_project_FlightPlanSettingsState_class_ReturnHomeOnDisconnectChanged_cmd = 0;
        public const int common_project_CalibrationState_class = 14;
        public const int common_project_CalibrationState_class_MagnetoCalibrationStateChanged_cmd = 0;
        public const int common_project_CalibrationState_class_MagnetoCalibrationRequiredState_cmd = 1;
        public const int common_project_CalibrationState_class_MagnetoCalibrationAxisToCalibrateChanged_cmd = 2;
        public const int common_project_CalibrationState_class_MagnetoCalibrationStartedChanged_cmd = 3;
        public const int common_project_CalibrationState_class_PitotCalibrationStateChanged_cmd = 4;
        public const int common_project_CameraSettingsState_class = 15;
        public const int common_project_CameraSettingsState_class_CameraSettingsChanged_cmd = 0;
        public const int common_project_FlightPlanState_class = 17;
        public const int common_project_FlightPlanState_class_AvailabilityStateChanged_cmd = 0;
        public const int common_project_FlightPlanState_class_ComponentStateListChanged_cmd = 1;
        public const int common_project_FlightPlanState_class_LockStateChanged_cmd = 2;
        public const int common_project_FlightPlanEvent_class = 19;
        public const int common_project_FlightPlanEvent_class_StartingErrorEvent_cmd = 0;
        public const int common_project_FlightPlanEvent_class_SpeedBridleEvent_cmd = 1;
        public const int common_project_ARLibsVersionsState_class = 18;
        public const int common_project_ARLibsVersionsState_class_ControllerLibARCommandsVersion_cmd = 0;
        public const int common_project_ARLibsVersionsState_class_SkyControllerLibARCommandsVersion_cmd = 1;
        public const int common_project_ARLibsVersionsState_class_DeviceLibARCommandsVersion_cmd = 2;
        public const int common_project_AudioState_class = 21;
        public const int common_project_AudioState_class_AudioStreamingRunning_cmd = 0;
        public const int common_project_HeadlightsState_class = 23;
        public const int common_project_HeadlightsState_class_intensityChanged_cmd = 0;
        public const int common_project_AnimationsState_class = 25;
        public const int common_project_AnimationsState_class_List_cmd = 0;
        public const int common_project_AccessoryState_class = 27;
        public const int common_project_AccessoryState_class_SupportedAccessoriesListChanged_cmd = 0;
        public const int common_project_AccessoryState_class_AccessoryConfigChanged_cmd = 1;
        public const int common_project_AccessoryState_class_AccessoryConfigModificationEnabled_cmd = 2;
        public const int common_project_ChargerState_class = 29;
        public const int common_project_ChargerState_class_ChargingInfo_cmd = 3;
        public const int common_project_RunState_class = 30;
        public const int common_project_RunState_class_RunIdChanged_cmd = 0;
        public const int jpsumo_project = 3;
        public const int jpsumo_project_PilotingState_class = 1;
        public const int jpsumo_project_PilotingState_class_PostureChanged_cmd = 0;
        public const int jpsumo_project_PilotingState_class_AlertStateChanged_cmd = 1;
        public const int jpsumo_project_PilotingState_class_SpeedChanged_cmd = 2;
        public const int jpsumo_project_AnimationsState_class = 3;
        public const int jpsumo_project_AnimationsState_class_JumpLoadChanged_cmd = 0;
        public const int jpsumo_project_AnimationsState_class_JumpTypeChanged_cmd = 1;
        public const int jpsumo_project_AnimationsState_class_JumpMotorProblemChanged_cmd = 2;
        public const int jpsumo_project_MediaRecordState_class = 7;
        public const int jpsumo_project_MediaRecordState_class_PictureStateChangedV2_cmd = 2;
        public const int jpsumo_project_MediaRecordState_class_VideoStateChangedV2_cmd = 3;
        public const int jpsumo_project_MediaRecordEvent_class = 20;
        public const int jpsumo_project_MediaRecordEvent_class_PictureEventChanged_cmd = 0;
        public const int jpsumo_project_MediaRecordEvent_class_VideoEventChanged_cmd = 1;
        public const int jpsumo_project_NetworkSettingsState_class = 9;
        public const int jpsumo_project_NetworkSettingsState_class_WifiSelectionChanged_cmd = 0;
        public const int jpsumo_project_NetworkState_class = 11;
        public const int jpsumo_project_NetworkState_class_WifiScanListChanged_cmd = 0;
        public const int jpsumo_project_NetworkState_class_AllWifiScanChanged_cmd = 1;
        public const int jpsumo_project_NetworkState_class_WifiAuthChannelListChanged_cmd = 2;
        public const int jpsumo_project_NetworkState_class_AllWifiAuthChannelChanged_cmd = 3;
        public const int jpsumo_project_NetworkState_class_LinkQualityChanged_cmd = 4;
        public const int jpsumo_project_AudioSettingsState_class = 13;
        public const int jpsumo_project_AudioSettingsState_class_MasterVolumeChanged_cmd = 0;
        public const int jpsumo_project_AudioSettingsState_class_ThemeChanged_cmd = 1;
        public const int jpsumo_project_RoadPlanState_class = 15;
        public const int jpsumo_project_RoadPlanState_class_ScriptMetadataListChanged_cmd = 0;
        public const int jpsumo_project_RoadPlanState_class_AllScriptsMetadataChanged_cmd = 1;
        public const int jpsumo_project_RoadPlanState_class_ScriptUploadChanged_cmd = 2;
        public const int jpsumo_project_RoadPlanState_class_ScriptDeleteChanged_cmd = 3;
        public const int jpsumo_project_RoadPlanState_class_PlayScriptChanged_cmd = 4;
        public const int jpsumo_project_MediaStreamingState_class = 19;
        public const int jpsumo_project_MediaStreamingState_class_VideoEnableChanged_cmd = 0;
        public const int jpsumo_project_VideoSettingsState_class = 22;
        public const int jpsumo_project_VideoSettingsState_class_AutorecordChanged_cmd = 0;
        /// <summary>
        /// Drone will disconnect 
        /// 
        /// This event is mainly triggered when the user presses on the power button of the product.
        ///
        /// **This event is a notification, you can't retrieve it in the cache of the device controller.** 
        /// Triggered: mainly when the user presses the power button of the drone. 
        /// </summary>
        public static Tuple<byte, byte, ushort> common_NetworkEvent_Disconnection = Tuple.Create<byte, byte, ushort>(common_project, common_project_NetworkEvent_class, common_project_NetworkEvent_class_Disconnection_cmd);

        /// <summary>
        /// All settings have been sent 
        /// 
        ///
        /// **Please note that you should not care about this event if you are using the libARController API as this library is handling the connection process for you.** 
        /// Triggered: when all settings values have been sent. 
        /// </summary>
        public static Tuple<byte, byte, ushort> common_SettingsState_AllSettingsChanged = Tuple.Create<byte, byte, ushort>(common_project, common_project_SettingsState_class, common_project_SettingsState_class_AllSettingsChanged_cmd);

        /// <summary>
        /// All settings have been reset 
        /// Triggered: by [ResetSettings](#0-2-1). 
        /// </summary>
        public static Tuple<byte, byte, ushort> common_SettingsState_ResetChanged = Tuple.Create<byte, byte, ushort>(common_project, common_project_SettingsState_class, common_project_SettingsState_class_ResetChanged_cmd);

        /// <summary>
        /// Product name changed 
        /// Triggered: by [SetProductName](#0-2-2). 
        /// </summary>
        public static Tuple<byte, byte, ushort> common_SettingsState_ProductNameChanged = Tuple.Create<byte, byte, ushort>(common_project, common_project_SettingsState_class, common_project_SettingsState_class_ProductNameChanged_cmd);

        /// <summary>
        /// Product version 
        /// Triggered: during the connection process. 
        /// </summary>
        public static Tuple<byte, byte, ushort> common_SettingsState_ProductVersionChanged = Tuple.Create<byte, byte, ushort>(common_project, common_project_SettingsState_class, common_project_SettingsState_class_ProductVersionChanged_cmd);

        /// <summary>
        /// Product serial (1st part) 
        /// Triggered: during the connection process. 
        /// </summary>
        public static Tuple<byte, byte, ushort> common_SettingsState_ProductSerialHighChanged = Tuple.Create<byte, byte, ushort>(common_project, common_project_SettingsState_class, common_project_SettingsState_class_ProductSerialHighChanged_cmd);

        /// <summary>
        /// Product serial (2nd part) 
        /// Triggered: during the connection process. 
        /// </summary>
        public static Tuple<byte, byte, ushort> common_SettingsState_ProductSerialLowChanged = Tuple.Create<byte, byte, ushort>(common_project, common_project_SettingsState_class, common_project_SettingsState_class_ProductSerialLowChanged_cmd);

        /// <summary>
        /// Country changed 
        /// Triggered: by [SetCountry](#0-2-3). 
        /// </summary>
        public static Tuple<byte, byte, ushort> common_SettingsState_CountryChanged = Tuple.Create<byte, byte, ushort>(common_project, common_project_SettingsState_class, common_project_SettingsState_class_CountryChanged_cmd);

        /// <summary>
        /// Auto-country changed 
        /// Triggered: by [SetAutoCountry](#0-2-4). 
        /// </summary>
        public static Tuple<byte, byte, ushort> common_SettingsState_AutoCountryChanged = Tuple.Create<byte, byte, ushort>(common_project, common_project_SettingsState_class, common_project_SettingsState_class_AutoCountryChanged_cmd);

        /// <summary>
        /// All states have been sent 
        /// 
        ///
        /// **Please note that you should not care about this event if you are using the libARController API as this library is handling the connection process for you.** 
        /// Triggered: when all states values have been sent. 
        /// </summary>
        public static Tuple<byte, byte, ushort> common_CommonState_AllStatesChanged = Tuple.Create<byte, byte, ushort>(common_project, common_project_CommonState_class, common_project_CommonState_class_AllStatesChanged_cmd);

        /// <summary>
        /// Battery state 
        /// Triggered: when the battery level changes. 
        /// </summary>
        public static Tuple<byte, byte, ushort> common_CommonState_BatteryStateChanged = Tuple.Create<byte, byte, ushort>(common_project, common_project_CommonState_class, common_project_CommonState_class_BatteryStateChanged_cmd);

        /// <summary>
        /// Mass storage state list 
        /// Triggered: when a mass storage is inserted or ejected. 
        /// </summary>
        public static Tuple<byte, byte, ushort> common_CommonState_MassStorageStateListChanged = Tuple.Create<byte, byte, ushort>(common_project, common_project_CommonState_class, common_project_CommonState_class_MassStorageStateListChanged_cmd);

        /// <summary>
        /// Mass storage info state list 
        /// Triggered: when a mass storage info changes. 
        /// </summary>
        public static Tuple<byte, byte, ushort> common_CommonState_MassStorageInfoStateListChanged = Tuple.Create<byte, byte, ushort>(common_project, common_project_CommonState_class, common_project_CommonState_class_MassStorageInfoStateListChanged_cmd);

        /// <summary>
        /// Date changed 
        /// 
        /// Corresponds to the latest date set on the drone.
        ///
        /// **Please note that you should not care about this event if you are using the libARController API as this library is handling the connection process for you.** 
        /// Triggered: by [SetDate](#0-4-1). 
        /// </summary>
        public static Tuple<byte, byte, ushort> common_CommonState_CurrentDateChanged = Tuple.Create<byte, byte, ushort>(common_project, common_project_CommonState_class, common_project_CommonState_class_CurrentDateChanged_cmd);

        /// <summary>
        /// Time changed 
        /// 
        /// Corresponds to the latest time set on the drone.
        ///
        /// **Please note that you should not care about this event if you are using the libARController API as this library is handling the connection process for you.** 
        /// Triggered: by [SetTime](#0-4-2). 
        /// </summary>
        public static Tuple<byte, byte, ushort> common_CommonState_CurrentTimeChanged = Tuple.Create<byte, byte, ushort>(common_project, common_project_CommonState_class, common_project_CommonState_class_CurrentTimeChanged_cmd);

        /// <summary>
        /// Rssi changed 
        /// Rssi (Wifi Signal between controller and product) changed 
        /// Triggered: regularly. 
        /// </summary>
        public static Tuple<byte, byte, ushort> common_CommonState_WifiSignalChanged = Tuple.Create<byte, byte, ushort>(common_project, common_project_CommonState_class, common_project_CommonState_class_WifiSignalChanged_cmd);

        /// <summary>
        /// Sensors state list 
        /// Triggered: at connection and when a sensor state changes. 
        /// </summary>
        public static Tuple<byte, byte, ushort> common_CommonState_SensorsStatesListChanged = Tuple.Create<byte, byte, ushort>(common_project, common_project_CommonState_class, common_project_CommonState_class_SensorsStatesListChanged_cmd);

        /// <summary>
        /// Product sub-model 
        /// 
        /// This can be used to customize the UI depending on the product 
        /// Triggered: at connection. 
        /// </summary>
        public static Tuple<byte, byte, ushort> common_CommonState_ProductModel = Tuple.Create<byte, byte, ushort>(common_project, common_project_CommonState_class, common_project_CommonState_class_ProductModel_cmd);

        /// <summary>
        /// Mass storage content 
        /// Triggered: when the content of the mass storage changes. 
        /// </summary>
        public static Tuple<byte, byte, ushort> common_CommonState_MassStorageContent = Tuple.Create<byte, byte, ushort>(common_project, common_project_CommonState_class, common_project_CommonState_class_MassStorageContent_cmd);

        /// <summary>
        /// Mass storage content for current run 
        /// 
        /// Only counts the files related to the current run (see [RunId](#0-30-0)) 
        /// Triggered: when the content of the mass storage changes and this content is related to the current run. 
        /// </summary>
        public static Tuple<byte, byte, ushort> common_CommonState_MassStorageContentForCurrentRun = Tuple.Create<byte, byte, ushort>(common_project, common_project_CommonState_class, common_project_CommonState_class_MassStorageContentForCurrentRun_cmd);

        /// <summary>
        /// Video recording timestamp 
        /// Current or last video recording timestamp.
        /// Timestamp in milliseconds since 00:00:00 UTC on 1 January 1970.
        /// **Please note that values don't persist after drone reboot** 
        /// Triggered: on video recording start and video recording stop or \n     after that the date/time of the drone changed. 
        /// </summary>
        public static Tuple<byte, byte, ushort> common_CommonState_VideoRecordingTimestamp = Tuple.Create<byte, byte, ushort>(common_project, common_project_CommonState_class, common_project_CommonState_class_VideoRecordingTimestamp_cmd);

        /// <summary>
        /// Overheat regulation type 
        /// </summary>
        public static Tuple<byte, byte, ushort> common_OverHeatState_OverHeatRegulationChanged = Tuple.Create<byte, byte, ushort>(common_project, common_project_OverHeatState_class, common_project_OverHeatState_class_OverHeatRegulationChanged_cmd);

        /// <summary>
        /// Wifi outdoor mode 
        /// Triggered: by [SetWifiOutdoorMode](#0-9-0). 
        /// </summary>
        public static Tuple<byte, byte, ushort> common_WifiSettingsState_outdoorSettingsChanged = Tuple.Create<byte, byte, ushort>(common_project, common_project_WifiSettingsState_class, common_project_WifiSettingsState_class_outdoorSettingsChanged_cmd);

        /// <summary>
        /// Playing state of a FlightPlan 
        /// Triggered: by [StartFlightPlan](#0-11-0), [PauseFlightPlan](#0-11-1) or [StopFlightPlan](#0-11-2). 
        /// </summary>
        public static Tuple<byte, byte, ushort> common_MavlinkState_MavlinkFilePlayingStateChanged = Tuple.Create<byte, byte, ushort>(common_project, common_project_MavlinkState_class, common_project_MavlinkState_class_MavlinkFilePlayingStateChanged_cmd);

        /// <summary>
        /// Mission item executed 
        /// Mission item has been executed 
        /// Triggered: when a mission item has been executed during a flight plan. 
        /// </summary>
        public static Tuple<byte, byte, ushort> common_MavlinkState_MissionItemExecuted = Tuple.Create<byte, byte, ushort>(common_project, common_project_MavlinkState_class, common_project_MavlinkState_class_MissionItemExecuted_cmd);

        /// <summary>
        /// ReturnHome behavior during FlightPlan 
        /// Define behavior of drone when disconnection occurs during a flight plan 
        /// Triggered: by [setReturnHomeOnDisconnectMode](#0-32-0). 
        /// </summary>
        public static Tuple<byte, byte, ushort> common_FlightPlanSettingsState_ReturnHomeOnDisconnectChanged = Tuple.Create<byte, byte, ushort>(common_project, common_project_FlightPlanSettingsState_class, common_project_FlightPlanSettingsState_class_ReturnHomeOnDisconnectChanged_cmd);

        /// <summary>
        /// Magneto calib process axis state 
        /// Triggered: when the calibration process is started with [StartOrAbortMagnetoCalib](#0-13-0) and each time an axis calibration state changes. 
        /// </summary>
        public static Tuple<byte, byte, ushort> common_CalibrationState_MagnetoCalibrationStateChanged = Tuple.Create<byte, byte, ushort>(common_project, common_project_CalibrationState_class, common_project_CalibrationState_class_MagnetoCalibrationStateChanged_cmd);

        /// <summary>
        /// Calibration required 
        /// Triggered: when the calibration requirement changes. 
        /// </summary>
        public static Tuple<byte, byte, ushort> common_CalibrationState_MagnetoCalibrationRequiredState = Tuple.Create<byte, byte, ushort>(common_project, common_project_CalibrationState_class, common_project_CalibrationState_class_MagnetoCalibrationRequiredState_cmd);

        /// <summary>
        /// Axis to calibrate during calibration process 
        /// Triggered: during the calibration process when the axis to calibrate changes. 
        /// </summary>
        public static Tuple<byte, byte, ushort> common_CalibrationState_MagnetoCalibrationAxisToCalibrateChanged = Tuple.Create<byte, byte, ushort>(common_project, common_project_CalibrationState_class, common_project_CalibrationState_class_MagnetoCalibrationAxisToCalibrateChanged_cmd);

        /// <summary>
        /// Calibration process state 
        /// Status of the calibration process 
        /// Triggered: by [StartOrAbortMagnetoCalib](#0-13-0) or when the process ends because it succeeded. 
        /// </summary>
        public static Tuple<byte, byte, ushort> common_CalibrationState_MagnetoCalibrationStartedChanged = Tuple.Create<byte, byte, ushort>(common_project, common_project_CalibrationState_class, common_project_CalibrationState_class_MagnetoCalibrationStartedChanged_cmd);

        /// <summary>
        /// Sent when the state of the pitot calibration has changed 
        /// </summary>
        public static Tuple<byte, byte, ushort> common_CalibrationState_PitotCalibrationStateChanged = Tuple.Create<byte, byte, ushort>(common_project, common_project_CalibrationState_class, common_project_CalibrationState_class_PitotCalibrationStateChanged_cmd);

        /// <summary>
        /// Camera info 
        /// Triggered: at connection. 
        /// </summary>
        public static Tuple<byte, byte, ushort> common_CameraSettingsState_CameraSettingsChanged = Tuple.Create<byte, byte, ushort>(common_project, common_project_CameraSettingsState_class, common_project_CameraSettingsState_class_CameraSettingsChanged_cmd);

        /// <summary>
        /// FlightPlan availability 
        /// 
        /// Availability is linked to GPS fix, magnetometer calibration, sensor states 
        /// Triggered: on change. 
        /// </summary>
        public static Tuple<byte, byte, ushort> common_FlightPlanState_AvailabilityStateChanged = Tuple.Create<byte, byte, ushort>(common_project, common_project_FlightPlanState_class, common_project_FlightPlanState_class_AvailabilityStateChanged_cmd);

        /// <summary>
        /// FlightPlan components state list 
        /// Triggered: when the state of required components changes. \n     GPS component is triggered when the availability of the GPS of the drone changes. \n     Calibration component is triggered when the calibration state of the drone sensors changes \n     Mavlink_File component is triggered when the command [StartFlightPlan](#0-11-0) is received. \n     Takeoff component is triggered when the drone needs to take-off to continue the FlightPlan. \n     WaypointsBeyondGeofence component is triggered when the command [StartFlightPlan](#0-11-0) is received. 
        /// </summary>
        public static Tuple<byte, byte, ushort> common_FlightPlanState_ComponentStateListChanged = Tuple.Create<byte, byte, ushort>(common_project, common_project_FlightPlanState_class, common_project_FlightPlanState_class_ComponentStateListChanged_cmd);

        /// <summary>
        /// FlightPlan lock state 
        /// 
        /// Represents the fact that the controller is able or not to stop or pause a playing FlightPlan 
        /// Triggered: when the lock changes. 
        /// </summary>
        public static Tuple<byte, byte, ushort> common_FlightPlanState_LockStateChanged = Tuple.Create<byte, byte, ushort>(common_project, common_project_FlightPlanState_class, common_project_FlightPlanState_class_LockStateChanged_cmd);

        /// <summary>
        /// FlightPlan start error 
        /// 
        ///
        /// **This event is a notification, you can't retrieve it in the cache of the device controller.** 
        /// Triggered: on an error after a [StartFlightPlan](#0-11-0). 
        /// </summary>
        public static Tuple<byte, byte, ushort> common_FlightPlanEvent_StartingErrorEvent = Tuple.Create<byte, byte, ushort>(common_project, common_project_FlightPlanEvent_class, common_project_FlightPlanEvent_class_StartingErrorEvent_cmd);

        /// <summary>
        /// FlightPlan speed clamping 
        /// 
        /// Sent when a speed specified in the FlightPlan file is considered too high by the drone.
        ///
        /// **This event is a notification, you can't retrieve it in the cache of the device controller.** 
        /// Triggered: on an speed related clamping after a [StartFlightPlan](#0-11-0). 
        /// </summary>
        public static Tuple<byte, byte, ushort> common_FlightPlanEvent_SpeedBridleEvent = Tuple.Create<byte, byte, ushort>(common_project, common_project_FlightPlanEvent_class, common_project_FlightPlanEvent_class_SpeedBridleEvent_cmd);

        /// <summary>
        /// Controller libARCommands version 
        /// </summary>
        public static Tuple<byte, byte, ushort> common_ARLibsVersionsState_ControllerLibARCommandsVersion = Tuple.Create<byte, byte, ushort>(common_project, common_project_ARLibsVersionsState_class, common_project_ARLibsVersionsState_class_ControllerLibARCommandsVersion_cmd);

        /// <summary>
        /// SkyController libARCommands version 
        /// </summary>
        public static Tuple<byte, byte, ushort> common_ARLibsVersionsState_SkyControllerLibARCommandsVersion = Tuple.Create<byte, byte, ushort>(common_project, common_project_ARLibsVersionsState_class, common_project_ARLibsVersionsState_class_SkyControllerLibARCommandsVersion_cmd);

        /// <summary>
        /// Device libARCommands version 
        /// </summary>
        public static Tuple<byte, byte, ushort> common_ARLibsVersionsState_DeviceLibARCommandsVersion = Tuple.Create<byte, byte, ushort>(common_project, common_project_ARLibsVersionsState_class, common_project_ARLibsVersionsState_class_DeviceLibARCommandsVersion_cmd);

        /// <summary>
        /// Audio stream direction 
        /// Triggered: by [SetAudioStreamDirection](#0-20-0). 
        /// </summary>
        public static Tuple<byte, byte, ushort> common_AudioState_AudioStreamingRunning = Tuple.Create<byte, byte, ushort>(common_project, common_project_AudioState_class, common_project_AudioState_class_AudioStreamingRunning_cmd);

        /// <summary>
        /// LEDs intensity 
        /// Lighting  
        /// Triggered: by [SetLedsIntensity](#0-22-0). 
        /// </summary>
        public static Tuple<byte, byte, ushort> common_HeadlightsState_intensityChanged = Tuple.Create<byte, byte, ushort>(common_project, common_project_HeadlightsState_class, common_project_HeadlightsState_class_intensityChanged_cmd);

        /// <summary>
        /// Animation state list 
        /// Paramaterless animations state list 
        /// Triggered: when the list of available animations changes and also when an animation state changes (can be triggered by [StartAnim](#0-24-0), [StopAnim](#0-24-1) or [StopAllAnims](#0-24-2). 
        /// </summary>
        public static Tuple<byte, byte, ushort> common_AnimationsState_List = Tuple.Create<byte, byte, ushort>(common_project, common_project_AnimationsState_class, common_project_AnimationsState_class_List_cmd);

        /// <summary>
        /// Supported accessories list 
        /// Triggered: at connection. 
        /// </summary>
        public static Tuple<byte, byte, ushort> common_AccessoryState_SupportedAccessoriesListChanged = Tuple.Create<byte, byte, ushort>(common_project, common_project_AccessoryState_class, common_project_AccessoryState_class_SupportedAccessoriesListChanged_cmd);

        /// <summary>
        /// Accessory config 
        /// Accessory config response. 
        /// Triggered: by [DeclareAccessory](#0-26-0). 
        /// </summary>
        public static Tuple<byte, byte, ushort> common_AccessoryState_AccessoryConfigChanged = Tuple.Create<byte, byte, ushort>(common_project, common_project_AccessoryState_class, common_project_AccessoryState_class_AccessoryConfigChanged_cmd);

        /// <summary>
        /// Accessory declaration availability 
        /// Availability to declare or not an accessory 
        /// Triggered: when the availability changes. 
        /// </summary>
        public static Tuple<byte, byte, ushort> common_AccessoryState_AccessoryConfigModificationEnabled = Tuple.Create<byte, byte, ushort>(common_project, common_project_AccessoryState_class, common_project_AccessoryState_class_AccessoryConfigModificationEnabled_cmd);

        /// <summary>
        /// Charging information 
        /// Triggered: when the product is charging or when the charging state changes. 
        /// </summary>
        public static Tuple<byte, byte, ushort> common_ChargerState_ChargingInfo = Tuple.Create<byte, byte, ushort>(common_project, common_project_ChargerState_class, common_project_ChargerState_class_ChargingInfo_cmd);

        /// <summary>
        /// Current run id 
        /// 
        /// A run id is uniquely identifying a run or a flight.
        /// For each run is generated on the drone a file which can be used by Academy to sum up the run.
        /// Also, each medias taken during a run has a filename containing the run id 
        /// Triggered: when the drone generates a new run id (generally right after a take off). 
        /// </summary>
        public static Tuple<byte, byte, ushort> common_RunState_RunIdChanged = Tuple.Create<byte, byte, ushort>(common_project, common_project_RunState_class, common_project_RunState_class_RunIdChanged_cmd);

        /// <summary>
        /// State of posture changed. 
        /// </summary>
        public static Tuple<byte, byte, ushort> jpsumo_PilotingState_PostureChanged = Tuple.Create<byte, byte, ushort>(jpsumo_project, jpsumo_project_PilotingState_class, jpsumo_project_PilotingState_class_PostureChanged_cmd);

        /// <summary>
        /// JS alert state changed 
        /// </summary>
        public static Tuple<byte, byte, ushort> jpsumo_PilotingState_AlertStateChanged = Tuple.Create<byte, byte, ushort>(jpsumo_project, jpsumo_project_PilotingState_class, jpsumo_project_PilotingState_class_AlertStateChanged_cmd);

        /// <summary>
        /// Notification sent when JS speed changes. 
        /// </summary>
        public static Tuple<byte, byte, ushort> jpsumo_PilotingState_SpeedChanged = Tuple.Create<byte, byte, ushort>(jpsumo_project, jpsumo_project_PilotingState_class, jpsumo_project_PilotingState_class_SpeedChanged_cmd);

        /// <summary>
        /// State of jump load changed 
        /// </summary>
        public static Tuple<byte, byte, ushort> jpsumo_AnimationsState_JumpLoadChanged = Tuple.Create<byte, byte, ushort>(jpsumo_project, jpsumo_project_AnimationsState_class, jpsumo_project_AnimationsState_class_JumpLoadChanged_cmd);

        /// <summary>
        /// State of jump type changed. 
        /// </summary>
        public static Tuple<byte, byte, ushort> jpsumo_AnimationsState_JumpTypeChanged = Tuple.Create<byte, byte, ushort>(jpsumo_project, jpsumo_project_AnimationsState_class, jpsumo_project_AnimationsState_class_JumpTypeChanged_cmd);

        /// <summary>
        /// State about the jump motor problem 
        /// </summary>
        public static Tuple<byte, byte, ushort> jpsumo_AnimationsState_JumpMotorProblemChanged = Tuple.Create<byte, byte, ushort>(jpsumo_project, jpsumo_project_AnimationsState_class, jpsumo_project_AnimationsState_class_JumpMotorProblemChanged_cmd);

        /// <summary>
        /// State of device picture recording changed 
        /// </summary>
        public static Tuple<byte, byte, ushort> jpsumo_MediaRecordState_PictureStateChangedV2 = Tuple.Create<byte, byte, ushort>(jpsumo_project, jpsumo_project_MediaRecordState_class, jpsumo_project_MediaRecordState_class_PictureStateChangedV2_cmd);

        /// <summary>
        /// State of device video recording changed 
        /// </summary>
        public static Tuple<byte, byte, ushort> jpsumo_MediaRecordState_VideoStateChangedV2 = Tuple.Create<byte, byte, ushort>(jpsumo_project, jpsumo_project_MediaRecordState_class, jpsumo_project_MediaRecordState_class_VideoStateChangedV2_cmd);

        /// <summary>
        /// Event of picture recording 
        /// </summary>
        public static Tuple<byte, byte, ushort> jpsumo_MediaRecordEvent_PictureEventChanged = Tuple.Create<byte, byte, ushort>(jpsumo_project, jpsumo_project_MediaRecordEvent_class, jpsumo_project_MediaRecordEvent_class_PictureEventChanged_cmd);

        /// <summary>
        /// Event of video recording 
        /// </summary>
        public static Tuple<byte, byte, ushort> jpsumo_MediaRecordEvent_VideoEventChanged = Tuple.Create<byte, byte, ushort>(jpsumo_project, jpsumo_project_MediaRecordEvent_class, jpsumo_project_MediaRecordEvent_class_VideoEventChanged_cmd);

        /// <summary>
        /// Wifi selection from product 
        /// </summary>
        public static Tuple<byte, byte, ushort> jpsumo_NetworkSettingsState_WifiSelectionChanged = Tuple.Create<byte, byte, ushort>(jpsumo_project, jpsumo_project_NetworkSettingsState_class, jpsumo_project_NetworkSettingsState_class_WifiSelectionChanged_cmd);

        /// <summary>
        /// One scanning result found 
        /// </summary>
        public static Tuple<byte, byte, ushort> jpsumo_NetworkState_WifiScanListChanged = Tuple.Create<byte, byte, ushort>(jpsumo_project, jpsumo_project_NetworkState_class, jpsumo_project_NetworkState_class_WifiScanListChanged_cmd);

        /// <summary>
        /// State sent when all scanning result sent 
        /// </summary>
        public static Tuple<byte, byte, ushort> jpsumo_NetworkState_AllWifiScanChanged = Tuple.Create<byte, byte, ushort>(jpsumo_project, jpsumo_project_NetworkState_class, jpsumo_project_NetworkState_class_AllWifiScanChanged_cmd);

        /// <summary>
        /// Notify of an Authorized Channel. 
        /// </summary>
        public static Tuple<byte, byte, ushort> jpsumo_NetworkState_WifiAuthChannelListChanged = Tuple.Create<byte, byte, ushort>(jpsumo_project, jpsumo_project_NetworkState_class, jpsumo_project_NetworkState_class_WifiAuthChannelListChanged_cmd);

        /// <summary>
        /// Notify the end of the list of Authorized wifi Channel. 
        /// </summary>
        public static Tuple<byte, byte, ushort> jpsumo_NetworkState_AllWifiAuthChannelChanged = Tuple.Create<byte, byte, ushort>(jpsumo_project, jpsumo_project_NetworkState_class, jpsumo_project_NetworkState_class_AllWifiAuthChannelChanged_cmd);

        /// <summary>
        /// Notification sent by the firmware to give an indication of the WiFi link quality. 
        /// </summary>
        public static Tuple<byte, byte, ushort> jpsumo_NetworkState_LinkQualityChanged = Tuple.Create<byte, byte, ushort>(jpsumo_project, jpsumo_project_NetworkState_class, jpsumo_project_NetworkState_class_LinkQualityChanged_cmd);

        /// <summary>
        /// Master volume control. 
        /// </summary>
        public static Tuple<byte, byte, ushort> jpsumo_AudioSettingsState_MasterVolumeChanged = Tuple.Create<byte, byte, ushort>(jpsumo_project, jpsumo_project_AudioSettingsState_class, jpsumo_project_AudioSettingsState_class_MasterVolumeChanged_cmd);

        /// <summary>
        /// Command to notify controller of new Audio Theme. 
        /// </summary>
        public static Tuple<byte, byte, ushort> jpsumo_AudioSettingsState_ThemeChanged = Tuple.Create<byte, byte, ushort>(jpsumo_project, jpsumo_project_AudioSettingsState_class, jpsumo_project_AudioSettingsState_class_ThemeChanged_cmd);

        /// <summary>
        /// Update the controller with metadata. 
        /// </summary>
        public static Tuple<byte, byte, ushort> jpsumo_RoadPlanState_ScriptMetadataListChanged = Tuple.Create<byte, byte, ushort>(jpsumo_project, jpsumo_project_RoadPlanState_class, jpsumo_project_RoadPlanState_class_ScriptMetadataListChanged_cmd);

        /// <summary>
        /// Notify controller that all script metadatas are updated. 
        /// </summary>
        public static Tuple<byte, byte, ushort> jpsumo_RoadPlanState_AllScriptsMetadataChanged = Tuple.Create<byte, byte, ushort>(jpsumo_project, jpsumo_project_RoadPlanState_class, jpsumo_project_RoadPlanState_class_AllScriptsMetadataChanged_cmd);

        /// <summary>
        /// Device response to ScriptUploaded command. 
        /// </summary>
        public static Tuple<byte, byte, ushort> jpsumo_RoadPlanState_ScriptUploadChanged = Tuple.Create<byte, byte, ushort>(jpsumo_project, jpsumo_project_RoadPlanState_class, jpsumo_project_RoadPlanState_class_ScriptUploadChanged_cmd);

        /// <summary>
        /// Device response to ScriptDelete command. 
        /// </summary>
        public static Tuple<byte, byte, ushort> jpsumo_RoadPlanState_ScriptDeleteChanged = Tuple.Create<byte, byte, ushort>(jpsumo_project, jpsumo_project_RoadPlanState_class, jpsumo_project_RoadPlanState_class_ScriptDeleteChanged_cmd);

        /// <summary>
        /// Device response to PlayScript command. 
        /// </summary>
        public static Tuple<byte, byte, ushort> jpsumo_RoadPlanState_PlayScriptChanged = Tuple.Create<byte, byte, ushort>(jpsumo_project, jpsumo_project_RoadPlanState_class, jpsumo_project_RoadPlanState_class_PlayScriptChanged_cmd);

        /// <summary>
        /// Return video streaming status. 
        /// </summary>
        public static Tuple<byte, byte, ushort> jpsumo_MediaStreamingState_VideoEnableChanged = Tuple.Create<byte, byte, ushort>(jpsumo_project, jpsumo_project_MediaStreamingState_class, jpsumo_project_MediaStreamingState_class_VideoEnableChanged_cmd);

        /// <summary>
        /// Get video automatic recording status. 
        /// </summary>
        public static Tuple<byte, byte, ushort> jpsumo_VideoSettingsState_AutorecordChanged = Tuple.Create<byte, byte, ushort>(jpsumo_project, jpsumo_project_VideoSettingsState_class, jpsumo_project_VideoSettingsState_class_AutorecordChanged_cmd);



    }
}
